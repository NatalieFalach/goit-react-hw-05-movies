{"version":3,"file":"static/js/387.1935326f.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,2GAA2BC,EAA3B,+BAAkC,EAAlC,kBAE8BH,EAAAA,EAAAA,IAAA,sBAAiC,CAChEI,OAAQ,CACNC,QAASJ,EACTE,KAAMA,KALP,uBAEWG,EAFX,EAEKC,KAFL,kBAQID,GARJ,sCAUHE,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMC,SAXnB,iFAeA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,kGAE8Bb,EAAAA,EAAAA,IAAA,gBAAmBa,GAAM,CACxDT,OAAQ,CACNC,QAASJ,KAJV,uBAEWK,EAFX,EAEKC,KAFL,kBAOID,GAPJ,gCASHE,QAAQC,MAAR,MATG,gFAaA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA2BD,GAA3B,kGAE8Bb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAiC,CAChET,OAAQ,CACNC,QAASJ,KAJV,uBAEWK,EAFX,EAEKC,KAFL,kBAOID,GAPJ,gCASHE,QAAQC,MAAR,MATG,gFAaA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA8BF,GAA9B,kGAE8Bb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAiC,CAChET,OAAQ,CACNC,QAASJ,KAJV,uBAEWK,EAFX,EAEKC,KAFL,kBAOID,GAPJ,gCASHE,QAAQC,MAAR,MATG,gFAaA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,kGAE8BjB,EAAAA,EAAAA,IAAA,eAA0B,CACzDI,OAAQ,CACNC,QAASJ,EACTiB,MAAOD,KALR,uBAEWX,EAFX,EAEKC,KAFL,kBAQID,GARJ,gCAUHE,QAAQC,MAAR,MAVG,gF,yIC1DMU,EAAMC,EAAAA,GAAAA,IAAH,2DAIHC,EAAYD,EAAAA,GAAAA,GAAH,4EAKTE,EAAQF,EAAAA,GAAAA,GAAH,6D,kBCqBlB,MAzBA,WACE,IAAQG,GAAWC,EAAAA,EAAAA,MAAXD,OACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOlB,EAAP,KAAamB,EAAb,KAQA,OANCC,EAAAA,EAAAA,YAAU,YACTb,EAAAA,EAAAA,IAAYS,GAAQK,MAAK,SAACrB,GACxBmB,EAAQnB,EAAKsB,KACd,GACD,GAAE,CAACN,KAGH,SAACF,EAAD,UACId,GAAQA,EAAKuB,KAAI,SAACC,EAAMC,GACxB,OACE,UAACV,EAAD,YACE,SAACH,EAAD,CAAKc,KAAKC,EAAAA,EAAAA,GAAYH,EAAKI,cAAeC,IAAKL,EAAKM,QACpD,6BAAKN,EAAKM,SACV,uCAAeN,EAAKO,eAHVN,EAMf,KAGN,C,sBC9Bc,SAASE,EAAYK,GAClC,OAAOA,EAAS,0CACuBA,GACnC,8DACL,C","sources":["api/MovieDbApi.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","helpers/getImageUrl.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = '8b8b26a0b27e03ef23871d035772175e';\n\nexport async function getTrending(page = 1) {\n  try {\n    const { data: response } = await axios.get(`/trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n        page: page,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n}\n\nexport async function getFilmById(id) {\n  try {\n    const { data: response } = await axios.get(`movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getCastById(id) {\n  try {\n    const { data: response } = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getReviewsById(id) {\n  try {\n    const { data: response } = await axios.get(`movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieBySearch(search) {\n  try {\n    const { data: response } = await axios.get(`search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query: search,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const Img = styled.img`\n  height: 300px;\n  width: 200px;\n`;\nexport const ActorList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\nexport const Actor = styled.li`\n  width: 200px;\n  font-size: 14px;\n`;\n","import { getCastById } from 'api/MovieDbApi';\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Img, ActorList, Actor, } from \"./Cast.styled\";\nimport getImageUrl from 'helpers/getImageUrl';\n\nfunction Cast() {\n  const { filmId } = useParams();\n  const [data, setData] = useState([]);\n\n   useEffect(() => {\n    getCastById(filmId).then((data) => {\n      setData(data.cast);\n    })\n   }, [filmId])\n\n  return (\n    <ActorList>\n      { data && data.map((item, index) => {\n        return (\n          <Actor key={index}>\n            <Img src={getImageUrl(item.profile_path)} alt={item.name} /> \n            <p> {item.name}</p>\n            <p>Character: {item.character}</p>\n          </Actor>\n        )\n      })}\n    </ActorList>\n  );\n}\n\nexport default Cast;","export default function getImageUrl(imageName) {\n  return imageName\n    ? `https://image.tmdb.org/t/p/w500/${imageName}`\n    : 'https://via.placeholder.com/150/d3d3d3/ffffff?text=No++photo';\n}\n"],"names":["axios","API_KEY","getTrending","page","params","api_key","response","data","console","error","Error","message","getFilmById","id","getCastById","getReviewsById","getMovieBySearch","search","query","Img","styled","ActorList","Actor","filmId","useParams","useState","setData","useEffect","then","cast","map","item","index","src","getImageUrl","profile_path","alt","name","character","imageName"],"sourceRoot":""}
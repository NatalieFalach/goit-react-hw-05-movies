{"version":3,"file":"static/js/387.c54184df.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,2GAA2BC,EAA3B,+BAAkC,EAAlC,SAC4BH,EAAAA,EAAAA,IAAA,uBAAkC,CACjEI,OAAQ,CACNC,QAASJ,EACTE,KAAMA,KAJL,uBACSG,EADT,EACGC,KADH,kBAOED,GAPF,mEAUA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,yFAC4BT,EAAAA,EAAAA,IAAA,gBAAmBS,GAAM,CACxDL,OAAQ,CACNC,QAASJ,KAHR,uBACSK,EADT,EACGC,KADH,kBAMED,GANF,kEASA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA2BD,GAA3B,yFAC4BT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,YAAiC,CAChEL,OAAQ,CACNC,QAASJ,KAHR,uBACSK,EADT,EACGC,KADH,kBAMED,GANF,kEASA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BF,GAA9B,yFAC4BT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,YAAiC,CAChEL,OAAQ,CACNC,QAASJ,KAHR,uBACSK,EADT,EACGC,KADH,kBAMED,GANF,kEASA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,8FAAwCV,EAAxC,+BAA+C,EAA/C,SAC4BH,EAAAA,EAAAA,IAAA,eAA0B,CACzDI,OAAQ,CACNC,QAASJ,EACTa,MAAOD,EACPV,KAAMA,KALL,uBACSG,EADT,EACGC,KADH,kBAQED,GARF,mE,2ICzCMS,EAAMC,EAAAA,GAAAA,IAAH,2DAIHC,EAAYD,EAAAA,GAAAA,GAAH,4EAKTE,EAAQF,EAAAA,GAAAA,GAAH,6DAKLG,EAAUH,EAAAA,GAAAA,GAAH,kK,4BCmCpB,MA3CA,WACE,IAAQI,GAAWC,EAAAA,EAAAA,MAAXD,OACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOf,EAAP,KAAaoB,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACRJ,GAAa,IACbd,EAAAA,EAAAA,IAAYU,GAAQS,MAAK,SAACtB,GACnBA,EAAKuB,KAAKC,QACbL,EAAS,sBAEXC,EAAQpB,EAAKuB,KACd,IAAEE,OAAM,SAACC,GACRP,EAAS,0BACV,IAAEQ,SAAQ,WACTV,GAAa,EACd,GACF,GAAE,CAACJ,IAEAG,GACK,SAACY,EAAA,EAAD,KAIP,gCACGZ,IAAa,SAACY,EAAA,EAAD,IACbV,IAAS,SAACN,EAAD,UAAUM,KACpB,SAACR,EAAD,UACGV,GAAQA,EAAK6B,KAAI,SAACC,GACjB,OACE,UAACnB,EAAD,YACE,SAACH,EAAD,CAAKuB,KAAKC,EAAAA,EAAAA,GAAYF,EAAKG,cAAeC,IAAKJ,EAAKK,QACpD,6BAAKL,EAAKK,SACV,uCAAeL,EAAKM,eAHVN,EAAKO,QAMpB,QAIR,C,sBCjDc,SAASL,EAAYM,GAClC,OAAOA,EAAS,yCACsBA,GAClC,8DACL,C","sources":["api/MovieDbApi.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","helpers/getImageUrl.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = '8b8b26a0b27e03ef23871d035772175e';\n\nexport async function getTrending(page = 1) {\n  const { data: response } = await axios.get(`/trending/movie/week`, {\n    params: {\n      api_key: API_KEY,\n      page: page,\n    },\n  });\n  return response;\n}\n\nexport async function getFilmById(id) {\n  const { data: response } = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n}\n\nexport async function getCastById(id) {\n  const { data: response } = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n}\n\nexport async function getReviewsById(id) {\n  const { data: response } = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n}\n\nexport async function getMovieBySearch(search, page = 1) {\n  const { data: response } = await axios.get(`search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: search,\n      page: page,\n    },\n  });\n  return response;\n}\n","import styled from 'styled-components';\n\nexport const Img = styled.img`\n  height: 300px;\n  width: 200px;\n`;\nexport const ActorList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\nexport const Actor = styled.li`\n  width: 200px;\n  font-size: 14px;\n`;\n\nexport const Massage = styled.h2`\n  text-align: center;\n  border-top: 1px solid black;\n  display: block;\n  margin-top: 10px;\n  padding-top: 20px;\n  color: orangered;\n`;\n","import { getCastById } from 'api/MovieDbApi';\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Img, ActorList, Actor, Massage} from \"./Cast.styled\";\nimport getImageUrl from 'helpers/getImageUrl';\nimport Spinner from 'components/Spinner/Spinner';\n\nfunction Cast() {\n  const { filmId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getCastById(filmId).then((data) => {\n      if (!data.cast.length) {\n        setError('There is no actors')\n      }\n      setData(data.cast);\n    }).catch((e) => {\n      setError('Oops... try again later');\n    }).finally(() => {\n      setIsLoading(false)\n    })\n  }, [filmId])\n  \n  if (isLoading) {\n    return <Spinner/>\n  }\n\n  return (\n    <>\n      {isLoading && <Spinner />}\n      {error && <Massage>{error}</Massage>}\n      <ActorList>\n        {data && data.map((item) => {\n          return (\n            <Actor key={item.cast_id}>\n              <Img src={getImageUrl(item.profile_path)} alt={item.name} /> \n              <p> {item.name}</p>\n              <p>Character: {item.character}</p>\n            </Actor>\n          )\n        })}\n      </ActorList>\n    </>\n  );\n}\n\nexport default Cast;","export default function getImageUrl(imageName) {\n  return imageName\n    ? `https://image.tmdb.org/t/p/w500${imageName}`\n    : 'https://via.placeholder.com/150/d3d3d3/ffffff?text=No++photo';\n}\n"],"names":["axios","API_KEY","getTrending","page","params","api_key","response","data","getFilmById","id","getCastById","getReviewsById","getMovieBySearch","search","query","Img","styled","ActorList","Actor","Massage","filmId","useParams","useState","isLoading","setIsLoading","error","setError","setData","useEffect","then","cast","length","catch","e","finally","Spinner","map","item","src","getImageUrl","profile_path","alt","name","character","cast_id","imageName"],"sourceRoot":""}